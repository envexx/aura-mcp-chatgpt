#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setup() {
  console.log('üöÄ AURA MCP Setup Script');
  console.log('========================\n');
  
  console.log('This script will help you configure your environment variables.\n');
  
  // Check if .env already exists
  const envPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(envPath)) {
    const overwrite = await question('‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }
  
  console.log('üìù Please provide the following configuration values:\n');
  
  // Collect configuration
  const config = {};
  
  config.OPENAI_API_KEY = await question('OpenAI API Key (required for AI features): ');
  if (!config.OPENAI_API_KEY) {
    console.log('‚ùå OpenAI API Key is required. Please get one from https://platform.openai.com/api-keys');
    rl.close();
    return;
  }
  
  config.NEXT_PUBLIC_AURA_API_URL = await question('AURA API URL (press Enter for default): ') || 'https://aura.adex.network/api';
  config.NEXT_PUBLIC_API_URL = await question('Local API URL (press Enter for default): ') || 'http://localhost:3000';
  
  console.log('\nüîó Blockchain RPC URLs (optional - press Enter to skip):');
  config.ETHEREUM_RPC_URL = await question('Ethereum RPC URL: ');
  config.POLYGON_RPC_URL = await question('Polygon RPC URL: ');
  config.ARBITRUM_RPC_URL = await question('Arbitrum RPC URL: ');
  
  console.log('\nüí≥ x402 Payment Configuration (optional):');
  config.X402_PAYMENT_ENDPOINT = await question('x402 Payment Endpoint: ') || 'https://x402.adex.network';
  config.X402_WALLET_ADDRESS = await question('x402 Wallet Address: ');
  
  config.NODE_ENV = 'development';
  config.PORT = '3000';
  
  // Generate .env content
  let envContent = '# AURA MCP Environment Configuration\n';
  envContent += '# Generated by setup script\n\n';
  
  envContent += '# OpenAI API Key for AI features\n';
  envContent += `OPENAI_API_KEY=${config.OPENAI_API_KEY}\n\n`;
  
  envContent += '# AURA API Configuration\n';
  envContent += `NEXT_PUBLIC_AURA_API_URL=${config.NEXT_PUBLIC_AURA_API_URL}\n`;
  envContent += `NEXT_PUBLIC_API_URL=${config.NEXT_PUBLIC_API_URL}\n\n`;
  
  if (config.ETHEREUM_RPC_URL || config.POLYGON_RPC_URL || config.ARBITRUM_RPC_URL) {
    envContent += '# Blockchain RPC URLs\n';
    if (config.ETHEREUM_RPC_URL) envContent += `ETHEREUM_RPC_URL=${config.ETHEREUM_RPC_URL}\n`;
    if (config.POLYGON_RPC_URL) envContent += `POLYGON_RPC_URL=${config.POLYGON_RPC_URL}\n`;
    if (config.ARBITRUM_RPC_URL) envContent += `ARBITRUM_RPC_URL=${config.ARBITRUM_RPC_URL}\n`;
    envContent += '\n';
  }
  
  if (config.X402_PAYMENT_ENDPOINT || config.X402_WALLET_ADDRESS) {
    envContent += '# x402 Payment Configuration\n';
    envContent += `X402_PAYMENT_ENDPOINT=${config.X402_PAYMENT_ENDPOINT}\n`;
    if (config.X402_WALLET_ADDRESS) envContent += `X402_WALLET_ADDRESS=${config.X402_WALLET_ADDRESS}\n`;
    envContent += '\n';
  }
  
  envContent += '# Development Configuration\n';
  envContent += `NODE_ENV=${config.NODE_ENV}\n`;
  envContent += `PORT=${config.PORT}\n`;
  
  // Write .env file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ Configuration saved to .env file!');
    console.log('\nüéâ Setup complete! You can now run:');
    console.log('   npm run dev');
    console.log('\nüìù Note: Make sure to restart your development server to load the new environment variables.');
    
    // Validate configuration
    console.log('\nüîç Validating configuration...');
    if (config.OPENAI_API_KEY && config.NEXT_PUBLIC_AURA_API_URL) {
      console.log('‚úÖ Basic configuration looks good!');
    } else {
      console.log('‚ö†Ô∏è  Some required configuration may be missing. Please check your .env file.');
    }
    
  } catch (error) {
    console.error('‚ùå Failed to write .env file:', error.message);
  }
  
  rl.close();
}

// Handle script execution
if (require.main === module) {
  setup().catch(console.error);
}

module.exports = { setup };
